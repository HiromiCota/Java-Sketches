package Approximator;

import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Random;
import javax.swing.JButton;
import javax.swing.SwingWorker;

/**
 * class Splash Description: Modal splash screen with progress bar Automatically
 * disposes of itself.
 *
 * Contains extensions/overrides for Task Overrides propertyChange Overrides
 * actionPerformed
 *
 * WARNING: NO DEFAULT CONSTRUCTOR MUST BE ATTACHED TO A FRAME 
 * WARNING: NO main()! MUST BE INVOKED BY ANOTHER CLASS!
 *
 * @author Hiromi Cota
 */
public class Splash extends javax.swing.JDialog
        implements ActionListener,
        PropertyChangeListener {

    private static Task task;

    /**
     * class Task Overrides doInBackground() Wastes a semi-random amount of time
     * in order to irregularly update the progress bar.
     */
    class Task extends SwingWorker<Void, Void> {

        /**
         * method doInBackground This is just here to waste a semi-random amount
         * of time. Throws InterruptedException Handles InterruptedException (by
         * throwing it away)
         *
         * WARNING: Has sleep() in a loop. Shouldn't matter, though.
         *
         * @author Hiromi Cota
         *
         * @return void, but capital V because it's an override.
         */
        @Override
        public Void doInBackground() {
            String loading = "Loading";
            Random random = new Random();
            int progress = 0;
            //Initialize progress property.
            setProgress(0);
            while (progress < 100) {
                //Sleep for up to one second.
                try {
                    Thread.sleep(random.nextInt(100));
                } catch (InterruptedException ignore) {
                }
                //Make random progress.
                progress += random.nextInt(10);
                setProgress(Math.min(progress, 100));
                loadingjLabel.setText(loading);
                loading += ".";
            }
            if (progress > 100) {
                task.done();
                try {
                    Thread.sleep(random.nextInt(1000));
                } catch (InterruptedException ignore) {
                }

            }
            return null;
        } // End random time-waster loop
    } //End task()

    /**
     * Method: propertyChange Updates jProgressBar each time task() triggers.
     * Triggers when task()'s progress property changes.
     *
     * WARNING: Property name is hardcoded
     *
     * @param evt
     */
    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if ("progress".equals(evt.getPropertyName())) {
            int progress = (Integer) evt.getNewValue();
            jProgressBar.setValue(progress);
        }
        if (jProgressBar.getValue() >= jProgressBar.getMaximum()) {
            this.dispose();
        }
    } // End propertyChange()

    /**
     * Method: actionPerformed() propertyChangeListener gets consumed when the
     * propertyChange triggers. So, create a new listener each time.
     *
     * @param evt
     */
    @Override
    public void actionPerformed(ActionEvent evt) {
        task = new Task();
        task.addPropertyChangeListener(this);
        task.execute();
    }

    /**
     * Overloaded Constructor:
     * Init, then create a listenable object and trigger
     * the listener.
     *
     * @param parent
     * @param modal
     */
    public Splash(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        this.setIconImage(Toolkit.getDefaultToolkit().getImage("src/Approximator/piIcon.jpg"));
        // ActionListener needs something to listen to
        // Make a hidden start button and listen to that.
        JButton startButton = new JButton("Start");
        startButton.setActionCommand("start");
        startButton.addActionListener(this);
        startButton.doClick();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jProgressBar = new javax.swing.JProgressBar();
        loadingjLabel = new javax.swing.JLabel();
        titlejLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        loadingjLabel.setFont(new java.awt.Font("sansserif", 0, 24)); // NOI18N
        loadingjLabel.setText("Loading");

        titlejLabel.setFont(new java.awt.Font("Magneto", 0, 36)); // NOI18N
        titlejLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titlejLabel.setText("Approximator 9,000!");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(loadingjLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(titlejLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 446, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titlejLabel)
                .addGap(18, 18, 18)
                .addComponent(loadingjLabel)
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(jProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar jProgressBar;
    private javax.swing.JLabel loadingjLabel;
    private javax.swing.JLabel titlejLabel;
    // End of variables declaration//GEN-END:variables
}
